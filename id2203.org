#+TITLE: Id2203
#+AUTHOR: Steven Shidi Zhou
#+DESCRIPTION: Lecture notes on Course ID2203 Advanced Distributed Systems
* STRT Lecture 1 - introduction to Distributed Systems
Distributed System definition: A set of *nodes*, connected by a *network*, which appear to its users as a *single* coherent system.
** Core problems in Distributed Systems
*** Consensus/Agreement Problem
  + All nodes/processes /propose/ a /value/.
  + Some nodes (non correct nodes) might crash & stop responding
*** Broadcast Problem
**** Atomic Broadcast
+ A node broadcasts a message
+ If sender correct, all correct nodes deliver message
+ All correct nodes deliver the *same* messages
+ Messages delivered in the *same order*

Atomic broadcast can be used to provide fault tolerance to solve Replicated State Machines (RSM)

Atomic broadcast can be used to solve Consensus! i.e. Every node broadcasts its proposal:
    1. Decide on the *first* received proposal
    2. Messages received in same order, thus all nodes will decide the same value

*Atomic Broadcast is equivalent to Consensus*
** Models of Distributed Systems
*** Asynchronous System Model
+ No bound on time to deliver a message
+ No bound on time to compute
+ Clocks are not synchronized

  *Internet is essentially asynchronous*
  *Consensus* /cannot/ be solved in asynchronous system if node crashes can happen. you can not find out if a process has failed or just slow.
*** Synchronous System
+ Known bound on time to deliver a message (latency)
+ Known bound on time to compute
+ Known lower and upper bounds in physical clock drift rate.

  Example: Embedded systems(shared clock), Multi-core computers

  *Consensus* is */solvable/* in synchronous system with up to N-1 crashes.
*** Partially synchronous System
+ Initially system is asynchronous
+ Eventually the system becomes synchronous.

  *Consensus is solvable* in partially synchronous system with up to N/2 crashes
*** Timed Asynchronous System
+ No bound on time to deliver a message
+ No bound on time to compute
+ Clocks have known clock drift rate
** Byzantine Faults
Some processes might behave arbitrarily:
+ Sending wrong information
+ Omit message...

*** Byzantine algorithms that tolerate such faults
+ Only tolerate up to 1/3 Byzantine processes
+ Non-Byzantine algorithms can often tolerate 1/2 nodes in the asynchronous model
* STRT Lecture 2 - Basic Abstrctions
** Specification
* TODO Lecture 3 -
* TODO Lecture 4 -
* TODO Lecture 5 -
* TODO Lecture 6 -
* TODO Lecture 7 -
* TODO Lecture 8 -
* TODO Lecture 9 -
* TODO Lecture 10 -
* TODO Lecture 11 -
* TODO Lecture 12 -
*
